/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RaffleFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createRaffle(address,uint256,string)": FunctionFragment;
    "raffleLogic()": FunctionFragment;
    "raffles(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRaffle",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raffles",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raffles", data: BytesLike): Result;

  events: {
    "NewRaffle(string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRaffle"): EventFragment;
}

export type NewRaffleEvent = TypedEvent<
  [string, string, string] & {
    Name: string;
    raffleAddress: string;
    raffleOwner: string;
  }
>;

export class RaffleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RaffleFactoryInterface;

  functions: {
    createRaffle(
      _token: string,
      _id: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    raffleLogic(overrides?: CallOverrides): Promise<[string]>;

    raffles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { _value: BigNumber }, string, string, string] & {
        Id: [BigNumber] & { _value: BigNumber };
        Name: string;
        raffleAddress: string;
        raffleOwner: string;
      }
    >;
  };

  createRaffle(
    _token: string,
    _id: BigNumberish,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  raffleLogic(overrides?: CallOverrides): Promise<string>;

  raffles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { _value: BigNumber }, string, string, string] & {
      Id: [BigNumber] & { _value: BigNumber };
      Name: string;
      raffleAddress: string;
      raffleOwner: string;
    }
  >;

  callStatic: {
    createRaffle(
      _token: string,
      _id: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    raffleLogic(overrides?: CallOverrides): Promise<string>;

    raffles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { _value: BigNumber }, string, string, string] & {
        Id: [BigNumber] & { _value: BigNumber };
        Name: string;
        raffleAddress: string;
        raffleOwner: string;
      }
    >;
  };

  filters: {
    "NewRaffle(string,address,address)"(
      Name?: null,
      raffleAddress?: null,
      raffleOwner?: null
    ): TypedEventFilter<
      [string, string, string],
      { Name: string; raffleAddress: string; raffleOwner: string }
    >;

    NewRaffle(
      Name?: null,
      raffleAddress?: null,
      raffleOwner?: null
    ): TypedEventFilter<
      [string, string, string],
      { Name: string; raffleAddress: string; raffleOwner: string }
    >;
  };

  estimateGas: {
    createRaffle(
      _token: string,
      _id: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    raffleLogic(overrides?: CallOverrides): Promise<BigNumber>;

    raffles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createRaffle(
      _token: string,
      _id: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    raffleLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raffles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
